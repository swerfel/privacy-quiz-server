{"version":3,"sources":["Logo.jpg","Header.tsx","util/Sockets.tsx","personal/NameView.tsx","questions/StatisticsView.tsx","questions/YesNoResponseView.tsx","questions/EstimationResponseView.tsx","questions/Histogram.tsx","questions/QuestionsList.tsx","admin/AdminControls.tsx","scoring/HallOfFame.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","backgroundColor","display","flexDirection","alignItems","justifyContent","color","overflow","position","heading","bottom","Header","classes","className","src","logo","alt","Box","textAlign","Typography","socket","io","on","console","log","cookies","Cookies","id","get","length","emit","set","path","useSubscription","event","listener","useEffect","off","margin","spacing","NameView","useState","name","setName","onApply","Paper","onSubmit","e","preventDefault","flexGrow","TextField","fullWidth","onChange","target","value","label","placeholder","IconButton","aria-label","onClick","StatisticsView","statistics","percentage","yesAnswers","noAnswers","YesNoResponse","question","answer","isActive","onResponse","response","Grid","container","item","Button","variant","EstimationResponse","setValue","estimate","xs","Slider","newValue","aria-labelledby","Histogram","values","graphWidth","barCount","barWidth","barPadding","maxValue","Math","max","width","height","viewBox","strokeWidth","strokeLinecap","d","stroke","transform","map","i","x","y","fill","Array","from","X_LABELS_COUNT","textAnchor","alignmentBaseline","AccordionHeader","children","fontSize","QuestionsList","questions","setQuestions","answers","setAnswers","setStatistics","selectedQuestion","setSelectedQuestion","onNewQuestions","useCallback","newQuestions","reverse","newActive","find","q","handleChange","isExpanded","Accordion","expanded","AccordionSummary","expandIcon","aria-controls","String","AccordionDetails","direction","estimates","AdminControls","admin","setAdmin","ScoreView","score","playerName","HallOfFame","scores","setScores","Card","CardContent","List","ListItem","gutterBottom","App","Container","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9dbf75d0.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Logo.25e848bb.jpg\";","\r\nimport { Box, createStyles, makeStyles, Theme, Typography } from '@material-ui/core';\r\nimport React from 'react';\r\nimport logo from './Logo.jpg';\r\n\r\nconst useStyles = makeStyles((theme: Theme) => createStyles({\r\n  root: {\r\n    backgroundColor: '#1b5f9e',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    color: 'lightgray',\r\n    overflow: 'hidden',\r\n    position: 'relative',\r\n  },\r\n  heading: {\r\n    color: '#51a025',\r\n    position: 'absolute',\r\n    bottom: '30px',\r\n  }\r\n}),\r\n);\r\n\r\nfunction Header() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <header  className={classes.root}>\r\n          <img src={logo} alt=\"Logo\" />\r\n          <Box textAlign=\"center\" className={classes.heading}>\r\n            <h1>Andrena-Privacy</h1>\r\n            <Typography>Wie gut kannst du deine Kollegen einsch√§tzen?</Typography>\r\n          </Box>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import { useEffect } from 'react';\r\nimport { io } from 'socket.io-client';\r\nimport Cookies from 'universal-cookie';\r\n\r\nexport const socket = (process.env.NODE_ENV === \"development\") ? io(\"localhost:3001\", { transports : ['websocket'] }) : io();\r\nsocket.on(\"connect\", () => {\r\n  console.log(\"connected\");\r\n\r\n  const cookies = new Cookies();\r\n  var id = cookies.get('PrivacyFirstSocketIdForRecovery');\r\n  if (id && id.length > 0) {\r\n    socket.emit(\"restore by id\", id);\r\n  } else {\r\n    cookies.set('PrivacyFirstSocketIdForRecovery', socket.id, { path: '/' });\r\n  }\r\n})\r\n\r\nexport const useSubscription = (event: string, listener: Function) => {\r\n    return useEffect(() => {\r\n        socket.on(event, listener);\r\n        return () => {\r\n          socket.off(event);\r\n        };\r\n      }, [event, listener]);\r\n}\r\n","import { Box, IconButton, Paper, TextField } from '@material-ui/core';\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport {FormEvent, useState} from 'react';\r\n\r\nimport  { socket } from '../util/Sockets';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    margin: {\r\n      margin: theme.spacing(1),\r\n    },\r\n  }),\r\n);\r\n\r\nfunction NameView(){\r\n  const classes = useStyles();\r\n  const [name, setName] = useState(\"\");\r\n  var onApply = () => socket.emit(\"name\", name);\r\n  var handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setName(e.target.value);\r\n  };\r\n  var submitName = (e: FormEvent) => {\r\n    e.preventDefault();\r\n    onApply();\r\n  };\r\n  return (\r\n        <Paper>\r\n          <form onSubmit={submitName}>\r\n            <Box display=\"flex\"> \r\n              <Box flexGrow={1}>\r\n                <TextField fullWidth className={classes.margin} onChange={handleChange} id=\"name\" label=\"Name\" value={name}\r\n                  placeholder=\"Name (Die Antworten werden nicht gespeichert, nur deine Sch√§tzabweichung wird den Anderen angezeigt)\"/>\r\n              </Box>\r\n              <Box>\r\n                <IconButton aria-label=\"√úbernehmen\" onClick={onApply} color=\"primary\"  className={classes.margin}>\r\n                  <SendIcon/>\r\n                </IconButton></Box>\r\n            </Box>\r\n          </form>\r\n        </Paper>\r\n  );\r\n}\r\n\r\nexport default NameView;\r\n","\r\nimport { Histogram } from './Histogram';\r\nimport { Statistics } from './Statistics';\r\n\r\nexport function StatisticsView({ statistics } : {statistics: Statistics}) {\r\n  return (\r\n    <>\r\n        <b>{statistics.percentage}%</b> der andrenas haben auf diese Frage mit \"Ja\" geantwortet.\r\n        (Ja: {statistics.yesAnswers}, Nein: {statistics.noAnswers}, Antworten gesamt: {statistics.yesAnswers+statistics.noAnswers})\r\n    </>\r\n  );\r\n}\r\n","\r\nimport { Question } from './Question';\r\nimport { Answer } from './Answer';\r\n\r\nimport {socket} from '../util/Sockets'\r\nimport { Box, Button, Grid } from '@material-ui/core';\r\n\r\n\r\n\r\nexport function YesNoResponse({ question, answer } : {question: Question, answer: Answer}) {\r\n    if (answer && (answer.answer === \"yes\" || answer.answer === \"no\"))\r\n      return (<Box>Du hast <b>\"{answer.answer === \"yes\" ? \"Ja\": \"Nein\"}\"</b> geantwortet.</Box>)\r\n    else if (question.isActive) {\r\n      var onResponse = (response: string) => {\r\n        return () => socket.emit(\"answer\", {id: question.id, answer: response})\r\n      }\r\n      return (\r\n        <Grid container spacing={2}>\r\n          <Grid item><Box>Und? Hast du?:</Box></Grid>\r\n          <Grid item><Button variant=\"contained\" color=\"primary\" onClick={onResponse(\"yes\")}>Ja</Button></Grid>\r\n          <Grid item><Button variant=\"contained\" color=\"primary\" onClick={onResponse(\"no\")}>Nein</Button></Grid>\r\n        </Grid>)\r\n    } else\r\n      return <p>Du hast auf diese Frage nicht geantwortet.</p>;\r\n  }","import { useState } from 'react';\r\n\r\nimport { Question } from './Question';\r\nimport { Answer } from './Answer';\r\n\r\nimport {socket} from '../util/Sockets'\r\nimport { Button, Grid, Slider } from '@material-ui/core';\r\n\r\nexport function EstimationResponse({ question, answer } : {question: Question, answer: Answer}) {\r\n    const [ value, setValue ] = useState(50);\r\n\r\n    if (answer && (answer.estimate || answer.estimate === 0))\r\n      return (<p>Du hast gesch√§tzt, dass <b>{answer.estimate}%</b> der MitspielerInnen \"Ja\" geantwortet haben.</p>)\r\n    else if (question.isActive) {\r\n      var onEstimate = () => socket.emit(\"estimate\", {id: question.id, estimate: value})\r\n      const handleChange = (event: any, newValue: number | number[]) => {\r\n        setValue(newValue as number);\r\n      };\r\n      return (\r\n        <>\r\n          <h4 id=\"estimation-slieder\" >\r\n            Was sch√§tzst du, wie viele % der Teilnehmer haben mit 'Ja' geantwortet?\r\n          </h4>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs>\r\n              <Slider value={value} onChange={handleChange} aria-labelledby=\"estimation-slieder\" />\r\n            </Grid>\r\n            <Grid item>\r\n            <Button variant=\"contained\" color=\"primary\" onClick={onEstimate}>Sch√§tzung abgeben ({value}%)</Button>\r\n            </Grid>\r\n          </Grid>\r\n        </>)\r\n    } else\r\n      return <p>Du hast f√ºr diese Frage keine Sch√§tzung abgegeben.</p>;\r\n  }","import { Box } from '@material-ui/core';\r\n\r\n\r\nexport function Histogram({ values } : {values: number[]}) {\r\n    const graphWidth = 700;\r\n    const graphHeight = 100;\r\n    const AXIS_WIDTH = 2;\r\n    const LABEL_OFFSET = 20;\r\n    const X_LABELS_COUNT = 10;\r\n    const TICS_LENGTH = 3;\r\n\r\n    const barCount = values.length;\r\n    const barWidth = graphWidth/barCount;\r\n    const maxBarHeight = 80;\r\n    const barPadding = graphWidth*0.05/barCount\r\n\r\n    const maxValue = Math.max(...values);\r\n    console.log(values)\r\n    \r\n    return (\r\n      /*<Box boxShadow={1}>\r\n          <Box height=\"100px\" width=\"100%\" \r\n          display=\"flex\"\r\n          alignItems=\"flex-end\">\r\n              {values.map(value => \r\n              <Box height={value / maxValue} minHeight=\"1px\" bgcolor=\"grey.300\"  width={barWidth} display=\"inline-block\" fontSize=\"0.8em\" textAlign=\"center\">\r\n                  0% - 10%\r\n              </Box>) \r\n              }\r\n          </Box>\r\n      </Box>*/\r\n        <svg width=\"100%\" height=\"100px\" viewBox={(-AXIS_WIDTH-LABEL_OFFSET)+\" \"+ (-graphHeight) + \" \" +(graphWidth+AXIS_WIDTH+2*LABEL_OFFSET)+\" \" + (graphHeight+AXIS_WIDTH+LABEL_OFFSET)}>\r\n          <g strokeWidth={AXIS_WIDTH} strokeLinecap=\"round\">\r\n            {/* axis */}\r\n            <path d={\"M 0 0 L 0 \"+-maxBarHeight*1.1} stroke=\"black\"/>\r\n            <path d={\"M 0 0 L \"+graphWidth+\" 0\"} stroke=\"black\"/>\r\n\r\n            {/* histogram blocks */}\r\n            <g transform=\"scale(1,-1)\">\r\n                {values.map((value, i) => \r\n                    <rect width={barWidth-2*barPadding} height={value/maxValue * (maxBarHeight -2*barPadding)} x={i * barWidth + barPadding} y={barPadding} fill=\"#008d46\"  />\r\n                )}\r\n            </g>\r\n\r\n            {/* x axis labeling */}\r\n            {Array.from({length: X_LABELS_COUNT+1}, (x,i) => <>\r\n              <text x={i/X_LABELS_COUNT*graphWidth} y={LABEL_OFFSET} textAnchor=\"middle\">{i/X_LABELS_COUNT*100}%</text>\r\n              <path d={\"M \"+(i/X_LABELS_COUNT*graphWidth)+\" \"+(-TICS_LENGTH)+\" l 0 \"+2*TICS_LENGTH} stroke=\"black\"/>\r\n            </>)}\r\n            \r\n            {/* y axis labeling */}\r\n            <text x={-LABEL_OFFSET} y={-maxBarHeight+barPadding} textAnchor=\"end\" alignmentBaseline=\"central\">{maxValue}</text>\r\n            <path d={\"M \"+(-TICS_LENGTH)+\" 0 l \"+2*TICS_LENGTH+\" 0\"} stroke=\"black\"/>\r\n            <path d={\"M \"+(-TICS_LENGTH)+\" \"+(-maxBarHeight+barPadding)+\" l \"+2*TICS_LENGTH+\" 0\"} stroke=\"black\"/>\r\n          </g>\r\n        </svg>\r\n    );\r\n}","import {  ReactNode, useCallback, useState } from 'react';\r\n\r\nimport { Question } from './Question';\r\nimport { Answer } from './Answer';\r\nimport { Statistics } from './Statistics';\r\nimport { useSubscription } from '../util/Sockets'\r\nimport { Accordion, AccordionDetails, AccordionSummary, Box, Grid } from '@material-ui/core';\r\nimport { StatisticsView } from './StatisticsView';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport { YesNoResponse } from './YesNoResponseView';\r\nimport { EstimationResponse } from './EstimationResponseView';\r\nimport { Histogram } from './Histogram';\r\n\r\nfunction AccordionHeader({isActive, children}: {isActive: boolean, children: ReactNode}) {\r\n  if(isActive)\r\n    return <Box fontSize=\"h5.fontSize\">{children}</Box> \r\n  else\r\n    return <Box>{children}</Box>\r\n}\r\n\r\nfunction QuestionsList() {\r\n  const [questions, setQuestions] = useState<Question[]>([]);\r\n  const [answers, setAnswers] = useState<Answer[]>([]);\r\n  const [statistics, setStatistics] = useState<Statistics[]>([])\r\n  const [selectedQuestion, setSelectedQuestion] = useState<number>(-1);\r\n\r\n  var onNewQuestions = useCallback((newQuestions: Question[]) => {\r\n    newQuestions.reverse(); // newest Quesion on the top\r\n    setQuestions(newQuestions);\r\n    var newActive = newQuestions.find(q => q.isActive);\r\n    if (newActive)\r\n      setSelectedQuestion(newActive.id);\r\n  }, [setQuestions, setSelectedQuestion]);\r\n\r\n  const handleChange = (question: number) => (event: React.ChangeEvent<{}>, isExpanded: boolean) => {\r\n    setSelectedQuestion(isExpanded ? question : -1);\r\n  };\r\n\r\n  useSubscription(\"questions\", onNewQuestions);\r\n  useSubscription(\"answers\", useCallback(setAnswers, [setAnswers]));\r\n  useSubscription(\"statistics\", useCallback(setStatistics, [setStatistics]));\r\n\r\n  return (<>\r\n    {questions.map(question =>\r\n      <Accordion key={question.id} expanded={question.id === selectedQuestion} onChange={handleChange(question.id)} >\r\n        <AccordionSummary\r\n          expandIcon={<ExpandMoreIcon />}\r\n          aria-controls={ question.question }\r\n          id={String(question.id)}\r\n        >\r\n          <AccordionHeader isActive={question.id === selectedQuestion}>\r\n            { (question.isActive ? \"Aktulle Frage: \" : \"\") + question.question }\r\n          </AccordionHeader>\r\n        </AccordionSummary>\r\n        <AccordionDetails>\r\n          <Grid container direction=\"column\" spacing={1}>\r\n            {statistics[question.id] && \r\n              <Grid item>\r\n                <h4>Antworten deiner Mitspieler*innen:</h4>\r\n                <StatisticsView statistics={statistics[question.id]}/>\r\n                <h4>Sch√§tzungen deiner Mitspieler*innen:</h4>\r\n                <Histogram values={statistics[question.id].estimates}/>\r\n              </Grid>\r\n            }\r\n            {answers[question.id]?.answer && <Grid item>\r\n              <h4>Deine Sch√§tzung:</h4>\r\n              <EstimationResponse  question={question} answer={answers[question.id]}/>\r\n            </Grid>}\r\n            <Grid item>\r\n              <h4>Deine Antwort:</h4>\r\n              <YesNoResponse question={question} answer={answers[question.id]}/>\r\n            </Grid>\r\n          </Grid>\r\n        </AccordionDetails>\r\n      </Accordion>\r\n    )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default QuestionsList;\r\n","import { Button } from '@material-ui/core';\r\nimport {useState} from 'react';\r\n\r\nimport { socket, useSubscription } from '../util/Sockets';\r\n\r\n\r\nfunction AdminControls(){\r\nconst [admin, setAdmin] = useState(false);\r\n  var onResponse = () => socket.emit(\"next question\");\r\n\r\n  useSubscription(\"you are admin\", () => setAdmin(true));\r\n\r\n  if (admin)\r\n    return (\r\n      <Button variant=\"contained\" color=\"secondary\" onClick={onResponse}>N√§chste Frage</Button>\r\n    );\r\n  else\r\n    return null;\r\n}\r\n\r\nexport default AdminControls;\r\n","import { useState } from 'react';\r\nimport { Card, CardContent, Typography, List, ListItem } from '@material-ui/core';\r\n\r\nimport { useSubscription, socket } from '../util/Sockets';\r\n\r\nimport {Score} from './Score';\r\n\r\nfunction ScoreView({score}: {score: Score}) {\r\n  if (score.id === socket.id)  {\r\n    return (<b>{score.playerName}(Du): {score.score}</b>);\r\n  } else {\r\n    return (<>{score.playerName}: {score.score}</>);\r\n  }\r\n}\r\n\r\nfunction HallOfFame() {\r\n  const [scores, setScores] = useState<Score[]>([]);\r\n  useSubscription(\"scores\", setScores);\r\n\r\n  return (\r\n    \r\n    <Card>\r\n      <CardContent>\r\n        <h3>\r\n          Bestenliste:\r\n        </h3>\r\n        <List>\r\n        {scores.map(score =>\r\n          <ListItem key={score.id}>\r\n            <ScoreView score={score}/>\r\n          </ListItem>\r\n        )}\r\n        </List>\r\n        <Typography gutterBottom>\r\n          Score: Summe der Differenzen der Andrena-Antworten zu der eigenen Sch√§tzung. D.h. kleiner ist besser ;)\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n\r\n  );\r\n}\r\n\r\nexport default HallOfFame;\r\n","import React from 'react';\n\nimport './App.css';\nimport Header from './Header';\nimport NameView from './personal/NameView';\nimport QuestionsList from './questions/QuestionsList';\nimport AdminControls from './admin/AdminControls';\nimport HallOfFame from './scoring/HallOfFame';\nimport { Container,  Grid } from '@material-ui/core';\n\nfunction App() {\n  return (\n    <Container  className=\"App\">\n      <Header/>\n      <main>\n        <Grid container spacing={3}>\n          <Grid item xs={12}>\n            <NameView/>\n          </Grid>\n          <Grid item xs={12}>\n            <AdminControls/>\n          </Grid>\n          <Grid item xs={8}>\n            <QuestionsList/>\n          </Grid>\n          <Grid item xs={4}>\n            <HallOfFame/>\n          </Grid>\n        </Grid>\n      </main>\n    </Container>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}