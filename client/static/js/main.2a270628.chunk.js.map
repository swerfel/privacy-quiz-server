{"version":3,"sources":["Logo.jpg","Header.tsx","util/Sockets.tsx","personal/NameView.tsx","questions/StatisticsView.tsx","questions/QuestionResponseView.tsx","questions/QuestionView.tsx","questions/QuestionsList.tsx","admin/AdminControls.tsx","scoring/HallOfFame.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Container","styled","header","Title","h2","Paragraph","p","Header","src","logo","alt","socket","io","on","console","log","cookies","Cookies","id","get","length","emit","set","path","useSubscription","event","listener","useEffect","off","NameView","useState","name","setName","InputGroup","className","Prepend","Text","FormControl","placeholder","aria-label","aria-describedby","onChange","e","String","target","value","Append","Button","variant","onClick","StatisticsView","statistics","yesAnswers","noAnswers","Card","Body","percentage","YesNoResponse","question","answer","isActive","onResponse","response","PercentageEstimateResponse","setValue","estimate","Form","Group","controlId","Label","Control","type","Number","custom","QuestionResponseView","QuestionView","Accordion","Toggle","as","eventKey","Collapse","QuestionsList","questions","setQuestions","answers","setAnswers","setStatistics","activeQuestion","setActiveQuestion","newQuestions","reverse","newActive","find","q","defaultActiveKey","activeKey","onSelect","_event","map","AdminControls","admin","setAdmin","ScoreView","score","playerName","HallOfFame","scores","setScores","ListGroup","Item","Footer","App","Row","Col","sm","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2a270628.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Logo.5a9fa48b.jpg\";","import React from 'react';\r\nimport styled from 'styled-components'\r\nimport logo from './Logo.jpg';\r\n\r\nconst Container = styled.header`\r\n    background-color: #1b5f9e;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    color: lightgray;\r\n    overflow: hidden;\r\n`\r\n\r\nconst Title = styled.h2`\r\n    color: white;\r\n    position: absolute;\r\n    top: 10px;\r\n`\r\n\r\nconst Paragraph = styled.p`\r\n    position: absolute;\r\n    top: 45px;\r\n`\r\n\r\n\r\nfunction Header() {\r\n  return (\r\n    <Container>\r\n          <img src={logo} alt=\"Logo\" />\r\n          <Title>Andrena-Privacy</Title>\r\n          <Paragraph>Wie gut kannst du deine Kollegen einschätzen?</Paragraph>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import { useEffect } from 'react';\r\nimport { io } from 'socket.io-client';\r\nimport Cookies from 'universal-cookie';\r\n\r\nexport const socket = (process.env.NODE_ENV === \"development\") ? io(\"localhost:3001\", { transports : ['websocket'] }) : io();\r\nsocket.on(\"connect\", () => {\r\n  console.log(\"connected\");\r\n\r\n  const cookies = new Cookies();\r\n  var id = cookies.get('PrivacyFirstSocketIdForRecovery');\r\n  if (id && id.length > 0) {\r\n    socket.emit(\"restore by id\", id);\r\n  } else {\r\n    cookies.set('PrivacyFirstSocketIdForRecovery', socket.id, { path: '/' });\r\n  }\r\n})\r\n\r\nexport const useSubscription = (event: string, listener: Function) => {\r\n    return useEffect(() => {\r\n        socket.on(event, listener);\r\n        return () => {\r\n          socket.off(event);\r\n        };\r\n      }, []);\r\n}\r\n","import {useState} from 'react';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nimport  { socket } from '../util/Sockets';\r\n\r\nfunction NameView(){\r\n  const [name, setName] = useState(\"\");\r\n  var onApply = () => socket.emit(\"name\", name);\r\n  var handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setName(String(e.target.value));\r\n  };\r\n  return (\r\n  <InputGroup className=\"mb-3\">\r\n    <InputGroup.Prepend>\r\n      <InputGroup.Text id=\"nameLabel\">Dein Name</InputGroup.Text>\r\n    </InputGroup.Prepend>\r\n    <FormControl\r\n      placeholder=\"Bitte Name eingeben. (Die Antworten werden nicht gespeichert, nur deine Schätzabweichung wird anderen angezeigt)\"\r\n      aria-label=\"Spielername\"\r\n      aria-describedby=\"nameLabel\"\r\n      onChange={handleChange}\r\n    />\r\n    <InputGroup.Append>\r\n      <Button variant=\"success\" onClick={onApply}>Übernehmen</Button>\r\n    </InputGroup.Append>\r\n  </InputGroup>);\r\n}\r\n\r\nexport default NameView;\r\n","\r\nimport Card from 'react-bootstrap/Card';\r\n\r\nimport { Statistics } from './Statistics';\r\n\r\nexport function StatisticsView({ statistics } : {statistics: Statistics}) {\r\n  if (statistics && (statistics.yesAnswers + statistics.noAnswers) > 0) {\r\n    return (\r\n      <Card>\r\n        <Card.Body>\r\n          <Card.Title>Antworten deiner MitspielerInnen:</Card.Title>\r\n          <Card.Text>\r\n            {statistics.percentage}% der andrenas haben auf diese Frage mit \"Ja\" geantwortet\r\n          </Card.Text>\r\n        </Card.Body>\r\n      </Card>\r\n    );\r\n  } else\r\n    return null;\r\n}\r\n","import Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nimport { useState } from 'react';\r\n\r\nimport { Question } from './Question';\r\nimport { Answer } from './Answer';\r\n\r\nimport {socket} from '../util/Sockets'\r\n\r\nfunction YesNoResponse({ question, answer } : {question: Question, answer: Answer}) {\r\n  if (answer && (answer.answer === \"yes\" || answer.answer === \"no\"))\r\n    return (<p>Du hast \"{answer.answer === \"yes\" ? \"Ja\": \"Nein\"}\" geantwortet.</p>)\r\n  else if (question.isActive) {\r\n    var onResponse = (response: string) => {\r\n      return () => socket.emit(\"answer\", {id: question.id, answer: response})\r\n    }\r\n    return (<p>\r\n            Und? Hast du?: <Button variant=\"primary\" onClick={onResponse(\"yes\")}>Ja</Button>\r\n            <Button variant=\"primary\" onClick={onResponse(\"no\")}>Nein</Button>\r\n      </p>)\r\n  } else\r\n    return <p>Du hast auf diese Frage nicht geantwortet.</p>;\r\n}\r\n\r\nfunction PercentageEstimateResponse({ question, answer } : {question: Question, answer: Answer}) {\r\n  const [ value, setValue ] = useState(50);\r\n  if (answer && answer.estimate)\r\n    return (<p>Du hast geschätzt, dass {answer.estimate}% der MitspielerInnen \"Ja\" geantwortet haben.</p>)\r\n  else if (question.isActive) {\r\n    var onEstimate = () => socket.emit(\"estimate\", {id: question.id, estimate: value})\r\n    var handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n      setValue(Number(e.target.value));\r\n    };\r\n    return (<>\r\n      <Form>\r\n        <Form.Group controlId=\"formBasicRange\">\r\n          <Form.Label>Was schätzst du, wie viele % der Teilnehmer haben mit \"Ja\" geantwortet?</Form.Label>\r\n          <Form.Control type=\"range\" onChange={handleChange} custom/>\r\n        </Form.Group>\r\n      </Form>\r\n      <Button variant=\"primary\" onClick={onEstimate}>Schätzung abgeben ({value}%)</Button>\r\n      </>)\r\n  } else\r\n    return <p>Du hast für diese Frage keine Schätzung abgegeben.</p>;\r\n}\r\n\r\nexport function QuestionResponseView({ question, answer } : {question: Question, answer: Answer}) {\r\n  return (<>\r\n    <style type=\"text/css\">\r\n      {`\r\n      .btn-primary {\r\n        margin: 0.1em;\r\n      }\r\n      `}\r\n    </style>\r\n    <Card>\r\n      <Card.Body>\r\n        <Card.Title>Deine Antworten:</Card.Title>\r\n        <YesNoResponse question={question} answer={answer}/>\r\n        <PercentageEstimateResponse question={question} answer={answer}/>\r\n      </Card.Body>\r\n    </Card>\r\n    </>)\r\n}\r\n","import Button from 'react-bootstrap/Button';\r\nimport Accordion from 'react-bootstrap/Accordion';\r\nimport Card from 'react-bootstrap/Card';\r\n\r\nimport { Question } from './Question';\r\nimport { Answer } from './Answer';\r\nimport { Statistics } from './Statistics';\r\nimport { StatisticsView } from './StatisticsView';\r\nimport { QuestionResponseView } from './QuestionResponseView';\r\n\r\n\r\nfunction QuestionView({ question, answer, statistics } : {question: Question, answer: Answer, statistics: Statistics}) {\r\n  return (\r\n    <Card>\r\n    <style type=\"text/css\">\r\n      {`\r\n      .accordion .card-header .btn-link {\r\n        font-weight: bold;\r\n        font-size: 1.3em;\r\n        text-align: left;\r\n      }\r\n      `}\r\n    </style>\r\n      <Card.Header>\r\n        <Accordion.Toggle as={Button} variant={question.isActive?\"link\":\"button\"} eventKey={String(question.id)}>\r\n          { (question.isActive ? \"Aktulle Frage: \" : \"\") + question.question }\r\n        </Accordion.Toggle>\r\n      </Card.Header>\r\n      <Accordion.Collapse eventKey={String(question.id)}>\r\n        <Card.Body>\r\n          <QuestionResponseView question={question} answer={answer}/>\r\n          <br/>\r\n          <StatisticsView statistics={statistics}/>\r\n        </Card.Body>\r\n      </Accordion.Collapse>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default QuestionView;\r\n","import { useState } from 'react';\r\nimport Accordion from 'react-bootstrap/Accordion';\r\n\r\nimport QuestionView from './QuestionView';\r\nimport { Question } from './Question';\r\nimport { Answer } from './Answer';\r\nimport { Statistics } from './Statistics';\r\nimport { useSubscription } from '../util/Sockets'\r\n\r\nfunction QuestionsList() {\r\n  const [questions, setQuestions] = useState<Question[]>([]);\r\n  const [answers, setAnswers] = useState<Answer[]>([]);\r\n  const [statistics, setStatistics] = useState<Statistics[]>([])\r\n  const [activeQuestion, setActiveQuestion] = useState<string>(\"0\");\r\n\r\n  function onNewQuestions(newQuestions: Question[]){\r\n    newQuestions.reverse(); // newest Quesion on the top\r\n    setQuestions(newQuestions);\r\n    var newActive = newQuestions.find(q => q.isActive);\r\n    if (newActive)\r\n      setActiveQuestion(String(newActive.id));\r\n  }\r\n\r\n  function onSelect(eventKey: string | null, _event: any) {\r\n    if (eventKey)\r\n      setActiveQuestion(eventKey);\r\n  }\r\n\r\n  useSubscription(\"questions\", onNewQuestions);\r\n  useSubscription(\"answers\", setAnswers);\r\n  useSubscription(\"statistics\", setStatistics);\r\n\r\n  return (\r\n    <Accordion defaultActiveKey=\"0\" activeKey={activeQuestion} onSelect={onSelect}>\r\n      {questions.map(question =>\r\n        <QuestionView key={question.id}\r\n                  question={question} answer={answers[question.id]} statistics={statistics[question.id]}/>\r\n      )}\r\n    </Accordion>\r\n  );\r\n}\r\n\r\nexport default QuestionsList;\r\n","import {useState} from 'react';\r\n\r\nimport { socket, useSubscription } from '../util/Sockets';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nfunction AdminControls(){\r\nconst [admin, setAdmin] = useState(false);\r\n  var onResponse = () => socket.emit(\"next question\");\r\n\r\n  useSubscription(\"you are admin\", () => setAdmin(true));\r\n\r\n  if (admin)\r\n    return (\r\n      <Button variant=\"danger\" onClick={onResponse}>Nächste Frage</Button>\r\n    );\r\n  else\r\n    return null;\r\n}\r\n\r\nexport default AdminControls;\r\n","import { useState } from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\n\r\nimport { useSubscription, socket } from '../util/Sockets';\r\n\r\nimport {Score} from './Score';\r\n\r\nfunction ScoreView({score}: {score: Score}) {\r\n  if (score.id === socket.id)  {\r\n    return (<b>{score.playerName}(Du): {score.score}</b>);\r\n  } else {\r\n    return (<>{score.playerName}: {score.score}</>);\r\n  }\r\n}\r\n\r\nfunction HallOfFame() {\r\n  const [scores, setScores] = useState<Score[]>([]);\r\n  useSubscription(\"scores\", setScores);\r\n\r\n  return (\r\n    <Card>\r\n      <Card.Header>Beste Schätzer:</Card.Header>\r\n      <ListGroup variant=\"flush\">\r\n        {scores.map(score =>\r\n          <ListGroup.Item key={score.playerName}>\r\n            <ScoreView score={score}/>\r\n          </ListGroup.Item>\r\n        )}\r\n      </ListGroup>\r\n      <Card.Footer className=\"text-muted\">Score: Summe der Differenzen der Andrena-Antworten zu der eigenen Schätzung. D.h. kleiner ist besser ;)</Card.Footer>\r\n    </Card>\r\n\r\n  );\r\n}\r\n\r\nexport default HallOfFame;\r\n","import React from 'react';\n\n\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nimport './App.css';\nimport Header from './Header';\nimport NameView from './personal/NameView';\nimport QuestionsList from './questions/QuestionsList';\nimport AdminControls from './admin/AdminControls';\nimport HallOfFame from './scoring/HallOfFame';\n\nfunction App() {\n  return (\n    <Container  className=\"App\">\n      <Row>\n        <Col><Header/></Col>\n      </Row>\n      <Row>\n        <Col><NameView/></Col>\n      </Row>\n      <Row>\n        <Col><AdminControls/></Col>\n      </Row>\n      <Row>\n        <Col sm={8}><QuestionsList/></Col>\n        <Col sm={4}><HallOfFame/></Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}